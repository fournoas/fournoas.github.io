<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>一个语言的诞生 on 白汤四物</title><link>https://www.fournoas.com/series/%E4%B8%80%E4%B8%AA%E8%AF%AD%E8%A8%80%E7%9A%84%E8%AF%9E%E7%94%9F/</link><description>Recent content in 一个语言的诞生 on 白汤四物</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Sat, 15 Aug 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://www.fournoas.com/series/%E4%B8%80%E4%B8%AA%E8%AF%AD%E8%A8%80%E7%9A%84%E8%AF%9E%E7%94%9F/index.xml" rel="self" type="application/rss+xml"/><item><title>一个语言的诞生（Act IV）</title><link>https://www.fournoas.com/posts/the-birth-of-a-language-4/</link><pubDate>Sat, 15 Aug 2015 00:00:00 +0000</pubDate><guid>https://www.fournoas.com/posts/the-birth-of-a-language-4/</guid><description>第四幕 虚拟机指令设计 常见的两种物理处理器指令架构有：复杂指令集（CISC）、简单指令集（RISC）。前者的代表是 Intel x86 处理器，后者的代表有 MIPS、SPARC 和 ARM。 CISC 指令集的指令长度不等，多种寻址方式</description></item><item><title>一个语言的诞生（Act III）</title><link>https://www.fournoas.com/posts/the-birth-of-a-language-3/</link><pubDate>Fri, 24 Jul 2015 00:00:00 +0000</pubDate><guid>https://www.fournoas.com/posts/the-birth-of-a-language-3/</guid><description>第三幕 垃圾回收 看过微软 .net coreclr 的源代码后，觉得 Lua、PHP 和 Python 的垃圾回收代码与之相比简直就是个玩具。而 Hotspot JVM 的垃圾回收算法更加复杂。 常见的垃圾回收技术能大致分成：引用计数、标记清理、标记缩并和节点复制几种。高级的技术有垃圾分代收集、渐进及并发收集、分布式垃圾收集。复杂的垃圾回收算法会</description></item><item><title>一个语言的诞生（Act II）</title><link>https://www.fournoas.com/posts/the-birth-of-a-language-2/</link><pubDate>Sun, 12 Jul 2015 00:00:00 +0000</pubDate><guid>https://www.fournoas.com/posts/the-birth-of-a-language-2/</guid><description>第二幕 对象内存布局 那些不怎么“动态”的语言，比如C#和JAVA，一般都会把数据类型分成“值”和“引用”，值类型是分配在栈上的，引用类型是分配在堆上。而“动态”的语言，比如“PHP”和“Python”所有的数据都是动态分配在堆上的。这么做的缺点一是浪费内存，二是访问慢。浪费内存是因</description></item><item><title>一个语言的诞生（Act I）</title><link>https://www.fournoas.com/posts/the-birth-of-a-language-1/</link><pubDate>Sat, 11 Jul 2015 00:00:00 +0000</pubDate><guid>https://www.fournoas.com/posts/the-birth-of-a-language-1/</guid><description>第一幕 哈希表 哈希表是动态脚本语言的基石。动态语言中，全局变量表、全局字符串表、对象虚函数表、元数据表皆为哈希表。欲实现语言，则必先实现哈希表。 哈希表原理很简单，不再赘述。不同语言实现的哈希表主要区别在于处理碰撞的机制不同。一种叫“Separate chaining”，PHP的哈希表</description></item><item><title>一个语言的诞生（Prologue）</title><link>https://www.fournoas.com/posts/the-birth-of-a-language-prologue/</link><pubDate>Sat, 11 Jul 2015 00:00:00 +0000</pubDate><guid>https://www.fournoas.com/posts/the-birth-of-a-language-prologue/</guid><description>一直琢磨着自己实现一个脚本语言。因为懒，直到最近才动手。 构想中的语言语法类似ActionScript，支持GC、闭包、Lambda表达式、协程、尾递归优化、迭代器/生成器、允许（编译期）强类型绑定的可嵌入式动态脚本语言。基础类型支持NULL、布尔型、32位整型、64位长整型、双精</description></item></channel></rss>