<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lua on 白汤四物</title><link>https://www.fournoas.com/tags/Lua/</link><description>Recent content in Lua on 白汤四物</description><generator>Hugo -- gohugo.io</generator><language>zh-CN</language><lastBuildDate>Thu, 25 Jun 2015 00:00:00 +0000</lastBuildDate><atom:link href="https://www.fournoas.com/tags/Lua/index.xml" rel="self" type="application/rss+xml"/><item><title>Lua 源代码中的字节对齐</title><link>https://www.fournoas.com/posts/data-structure-alignment-in-lua-source-code/</link><pubDate>Thu, 25 Jun 2015 00:00:00 +0000</pubDate><guid>https://www.fournoas.com/posts/data-structure-alignment-in-lua-source-code/</guid><description>Lua 源码中定义了一个叫 L_Umaxalign 的数据类型： typedef union { double u; void *s; lua_Integer i; long l; } L_Umaxalign; 这个结构其实是该平台上最长的数据类型。然后和 TString 和 Udata 结构定义成一个联合体： typedef union UTString { L_Umaxalign dummy; /* ensures maximum alignment for strings */ TString tsv; } UTString; typedef union UUdata { L_Umaxalign dummy; /* ensures maximum alignment for &#39;local&#39; udata */ Udata uv; } UUdata; 之所以这样处理是因为 TString 和 Udata 其实是一块连续内存区域的头部，后面紧跟实体数据。为了</description></item></channel></rss>